service: import-service
# app and org for use with dashboard.serverless.com
app: aws-react-shop
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::import-product-bucket/*"

    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::import-product-bucket"

    - Effect: "Allow"
      Action:
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
        - "sns:Publish"
      Resource:
        - Fn::GetAtt:
            - "catalogItemsQueue"
            - "Arn"
        - Ref: "createProductTopic"

  #  iam:
  #    role:
  #      statements:
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:ListBucket"
  #          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:PutObject"
  #          Resource:
  #            Fn::Join:
  #              - ""
  #              - - "arn:aws:s3:::"
  #                - "Ref" : "ServerlessDeploymentBucket"
  #                - "/*"

  # you can define service wide environment variables here
  # environment:
# you can add packaging information here
package:
  patterns:
    #    - '!exclude-me.js'
    #    - '!exclude-me-dir/**'
    - ../node_modules/csv-parser/**
#    - include-me-dir/**

functions:
  importProductsFile:
    handler: handlers/importProductsFile.importProductsFile
    events:
      - httpApi:
          path: /import
          method: get

  importFileParser:
    handler: handlers/importFileParser.importFileParser
    events:
      - s3:
          bucket: import-product-bucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/ # Trigger only for files in 'uploaded/' folder
          existing: true

  # importFileParser:
  #   handler: handlers/importFileParser.importFileParser
  #   events:
  #     - httpApi:
  #         path: /import
  #         method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogItemsQueue"
    createProductTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "createProductTopic"
    firstEmailSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Ref: "createProductTopic"
        Protocol: "email"
        Endpoint: "reshetniktati@gmail.com"
        FilterPolicy:
          price:
            - numeric:
                ">=": 10
    secondEmailSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Ref: "createProductTopic"
        Protocol: "email"
        Endpoint: "tinareshetnik@gmail.com"
        FilterPolicy:
          price:
            - numeric:
                "<": 10
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
