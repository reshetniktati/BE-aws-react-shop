service: product-service
# app and org for use with dashboard.serverless.com
app: aws-react-shop
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

    - Effect: "Allow"
      Action:
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
        - "sqs:SendMessage"
      Resource:
        - Fn::GetAtt:
            - "catalogItemsQueue"
            - "Arn"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# package:
#   exclude:
#     - node_modules/**

functions:
  getProductsList:
    handler: handlers/getProductsList.getProductsList
    events:
      - httpApi:
          path: /products
          method: get

  getProductsById:
    handler: handlers/getProductsById.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get

  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - httpApi:
          path: /products
          method: post

  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - "catalogItemsQueue"
              - "Arn"
          batchSize: 5

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ProductsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Products
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    StocksTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Stocks
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogItemsQueue"

    createProductTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "createProductTopic"

    firstEmailSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Ref: "createProductTopic"
        Protocol: "email"
        Endpoint: "reshetniktati@gmail.com"
        FilterPolicy:
          price:
            - ">=100"

    secondEmailSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Ref: "createProductTopic"
        Protocol: "email"
        Endpoint: "tinareshetnik@gmail.com"
        FilterPolicy:
          price:
            - "<100"
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
